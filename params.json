{"name":"Bnhtmltableviewhelper","tagline":"Class to help a UITableViewController to manage an HTML Table from a website as a datasource ","body":"BNHtmlTableViewHelper\r\n=====================\r\n##Objectives\r\n- To have a simple and concise way to extract a lot of data from html pages especially inside tables\r\n- Help a UITableViewController to present them in a UITableView.\r\n\r\n## This library contains :\r\n- A category to TFHpple adding method *searchArrayWithXPathDictionaryQuery:* to read in one shot several datas (for example columns in a table) from a template (that could be selected in your code to support multiple templates in a site) and return it in NSMutableDictionnary.\r\n- A Class *BNHtmlTable* that use that NSMutableDictionnary in his initializer to help a UITableViewController to manage an HTML Table from a website as a datasource \r\n\r\n\r\n##Example of searchArrayWithXPathDictionaryQuery: usage \r\n\r\n###1) Define a template to analyze, process and store your table in 1 line of this litteral syntax.\r\n\r\n`@[     @{ @\"Key\": @\"myVariable\",@\"Xpath\": @\"//tbody/tr/td/text()\",@\"Block\":[myBlock copy] }      \r\n];`\r\n\r\nParticulary efficient with multiple variables, (see complete example below).\r\n\r\n- The template is an NSArray of NSDictionnary.\r\n- Each NSArray item is a data list for example a column you want to read, \r\n- Each NSDictionnary contains the column name with key @\"Key\", \r\n- the XPath with key @\"Xpath\" and \r\n- a Block to perform on the return of XPath request with the key @\"Block\".\r\n\r\n#####a) Choose every key name for column or list you want to extract.\r\n#####b) With an html inspector, extract the XPath element you need from the webpage.\r\n#####c) Write or reuse the appropriate Block for what you want to do.\r\n```\r\nNSArray *template=@[\r\n   @{@\"Key\":@\"fileName\",@\"Xpath\":@\"//tbody/tr/td[8]/text()\",@\"Block\":[elementTexte copy]},\r\n   @{@\"Key\":@\"fileSize\",@\"Xpath\":@\"//tbody/tr/td[9]/text()\",@\"Block\":[elementTexte copy]},                                               \r\n   @{@\"Key\":@\"titre\",   @\"Xpath\":@\"//tbody/tr/td[5]\",       @\"Block\":[elementAorText copy]},                                               \r\n   @{@\"Key\":@\"titreURL\",@\"Xpath\":@\"//tbody/tr/td[5]\",       @\"Block\":[elementAorTextURL copy]},                                               \r\n   @{@\"Key\":@\"lang\",    @\"Xpath\":@\"//tbody/tr/td[6]/img\",   @\"Block\":[elementAlt copy]},\r\n   @{@\"Key\":@\"par2\",    @\"Xpath\":@\"//tbody/tr/td[10]\",      @\"Block\":[elementImageAlt copy]},\r\n   @{@\"Key\":@\"nfo\",     @\"Xpath\":@\"//tbody/tr/td[10]\",      @\"Block\":[elementAHref copy]},\r\n   @{@\"Key\":@\"Sections\",@\"Xpath\":@\"//tbody\",                @\"Block\":[headerWithDate copy]} \r\n                  ];\r\n```\r\n**The @\"Sections\" key is special, it must have been construct in the format described below by your block.**\r\n\r\n###2) Get the data\r\n\r\n#####a) Get the page\r\n```\r\nNSString *url=@\"http://www.example.com/api/?request=test\";\r\nNSURL *searchUrl=[NSURL URLWithString:url];\r\nNSData *htmlData=[NSData dataWithContentsOfURL:searchUrl];\r\n```\r\n#####b) Parse it with hpple library\r\n```\r\nTFHpple *parser=[TFHpple hppleWithHTMLData:htmlData];\r\n```\r\n#####c) Call the new hpple method included to return a NSMutable Dictionnay that contains a NSArray (if several lines) for each key.\r\n```\r\nNSMutableDictionary *currentCatDict=[parser searchArrayWithXPathDictionaryQuery:template];\r\n```\r\n##Example of Blocks :\r\n```\r\ntypedef NSString *(^element)(TFHppleElement *);\r\n\r\nelement elementAHref = ^(TFHppleElement *el) {\r\n        NSString *aString=[[el firstChildWithTagName:@\"a\"] objectForKey:@\"href\"];\r\n        if (!aString) {\r\n            aString=@\"empty\";\r\n        }\r\n        return aString;\r\n    };\r\nelement elementTexte = ^(TFHppleElement *el) {\r\n     \tNSString *aString=[el content];\r\n        if (!aString) {\r\n            aString=@\"empty\";\r\n        }\r\n        return aString;\r\n    };\r\n\r\n\r\n```\r\n\r\n##Example of BNHtmlTable usage :\r\n\r\n####1) After the call to TFHpple category above, Create a BHtmlTable with the dictionnary :\r\n```\r\nBNHtmlTable *htmltable=[[BNHtmlTable alloc ]initWithDictionary:currentCatDict];\r\n```\r\n####2) Use the BNHtmlTable in your delegate :\r\n##### a) Section management\r\n\r\nThe Object with @\"Section\" key must be a NSMutableArray containing a NSDictionnary per section with the following keys @\"Title\" that is a NSString and @\"Rows\" that is an int.\r\n\r\n```\r\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\r\n        // Return the number of sections.\r\n    return [htmltable numberOfSections];\r\n}\r\n\r\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\r\n        // Return the number of rows in the section.\r\n    return [htmltable numberOfRowsInSection:section];\r\n}\r\n\r\n- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {\r\n        // return section title\r\n    return [htmltable titleHeaderInSection:section];\r\n}\r\n```\r\n##### b) Cell setup with the NSDictionnary using litterals\r\n```\r\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\r\nUITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"myidentifier\"];\r\nNSDictionary *hcell=[htmltable rowAtIndexPath:indexPath];\r\n// Set the controls for example using outlet from IB\r\nself.keynameOutlet.text=hcell[@\"keyname\"];\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}